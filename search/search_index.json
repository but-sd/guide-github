{"config":{"lang":["fr"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Accueil","text":"<p>.....</p>"},{"location":"actions/","title":"Actions","text":"<p>Les <code>Actions</code> github sont des scripts qui peuvent \u00eatre d\u00e9clench\u00e9s par des \u00e9v\u00e9nements sur le d\u00e9p\u00f4t. Ils sont stock\u00e9s dans le dossier <code>.github/workflows</code> du d\u00e9p\u00f4t. Les actions sont d\u00e9finies dans un fichier YAML. </p> <p>Les actions peuvent \u00eatre d\u00e9clench\u00e9es par diff\u00e9rents \u00e9v\u00e9nements, elles permettent d'automatiser des t\u00e2ches.</p> <p>Les actions peuvent \u00eatre d\u00e9clench\u00e9es par diff\u00e9rents \u00e9v\u00e9nements :</p> <ul> <li><code>push</code> : lorsqu'un commit est pouss\u00e9 sur le d\u00e9p\u00f4t</li> <li><code>pull_request</code> : lorsqu'une pull request est cr\u00e9\u00e9e ou mise \u00e0 jour</li> <li><code>schedule</code> : \u00e0 intervalle r\u00e9gulier</li> <li><code>workflow_dispatch</code> : lorsqu'un \u00e9v\u00e9nement est d\u00e9clench\u00e9 manuellement</li> </ul> <p>Nous allons plus particuli\u00e8rement nous int\u00e9resser aux actions qui se d\u00e9clenchent sur des \u00e9v\u00e9nements de <code>Push</code> et de <code>Pull Request</code>. En effet afin de s\u00e9curiser le d\u00e9p\u00f4t, nous allons mettre en place des actions qui vont v\u00e9rifier que le code qui est pouss\u00e9 sur le d\u00e9p\u00f4t est conforme \u00e0 certaines r\u00e8gles.</p> <p>Il s'agit de la premi\u00e8re \u00e9tape de la mise en place d'un processus de <code>Continuous Integration</code> (CI). L'int\u00e9gration continue est un processus qui permet de v\u00e9rifier que le code qui est pouss\u00e9 sur le d\u00e9p\u00f4t est conforme \u00e0 certaines r\u00e8gles. on s'assure ainsi en continu que le code est fonctionnel et qu'il respecte les r\u00e8gles de codage que l'on a d\u00e9finies.</p>"},{"location":"actions/#creation-dune-action","title":"Cr\u00e9ation d'une action","text":""},{"location":"actions/#exemple-dun-workflow-predefini","title":"Exemple d'un workflow pr\u00e9d\u00e9fini","text":"<p>github propose un certain nombre de workflow pr\u00e9d\u00e9finis en fonction du langage utilis\u00e9. Nous allons utiliser le workflow <code>Node.js</code> qui permet de lancer des actions sur un projet Node.js.</p> <p></p> <p>Fichier YAML g\u00e9n\u00e9r\u00e9 par github :</p> <pre><code># This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node\n# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs\n\nname: Node.js CI\n\non:\n  push:\n    branches: [ \"develop\" ]\n  pull_request:\n    branches: [ \"develop\" ]\n\njobs:\n  build:\n\n    runs-on: ubuntu-latest\n\n    strategy:\n      matrix:\n        node-version: [14.x, 16.x, 18.x]\n        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/\n\n    steps:\n    - uses: actions/checkout@v3\n    - name: Use Node.js ${{ matrix.node-version }}\n      uses: actions/setup-node@v3\n      with:\n        node-version: ${{ matrix.node-version }}\n        cache: 'npm'\n    - run: npm ci\n    - run: npm run build --if-present\n    - run: npm test\n</code></pre> <p>Cet exemple contient plusieurs parties :</p> <ul> <li>La partie <code>name</code> permet de donner un nom au workflow. C'est le nom qui sera affich\u00e9 dans l'interface de github.</li> <li>La partie <code>on</code> permet de d\u00e9finir les \u00e9v\u00e9nements qui vont d\u00e9clencher le workflow. Dans cet exemple, le workflow sera d\u00e9clench\u00e9 sur les \u00e9v\u00e9nements <code>push</code> et <code>pull_request</code> sur la branche <code>develop</code>.</li> <li>La partie <code>jobs</code> permet de d\u00e9finir les jobs qui vont \u00eatre ex\u00e9cut\u00e9s par le workflow. Dans cet exemple, il n'y a qu'un seul job qui s'appelle <code>build</code>.<ul> <li>La sous-partie <code>build</code> permet de d\u00e9finir un job. Dans cet exemple, le job s'appelle <code>build</code>.<ul> <li>La sous-partie <code>runs-on</code> permet de d\u00e9finir l'environnement sur lequel le job va \u00eatre ex\u00e9cut\u00e9. Dans cet exemple, le job va \u00eatre ex\u00e9cut\u00e9 sur une machine <code>ubuntu-latest</code>. Github propose plusieurs environnements : Linux, Windows, MacOS. Sauf cas particulier, on utilise g\u00e9n\u00e9ralement l'environnement <code>ubuntu-latest</code>.</li> <li>La sous-partie <code>strategy</code> permet de d\u00e9finir une matrice, ici on d\u00e9finit une matrice de versions de Node.js. Dans cet exemple, le job va \u00eatre ex\u00e9cut\u00e9 sur les versions 14, 16 et 18 de Node.js.</li> <li>La sous-partie <code>steps</code> permet de d\u00e9finir les \u00e9tapes qui vont \u00eatre ex\u00e9cut\u00e9es par le job. Dans cet exemple, il y a 5 \u00e9tapes qui vont \u00eatre ex\u00e9cut\u00e9es :<ul> <li><code>actions/checkout@v3</code> : permet de r\u00e9cup\u00e9rer le code du d\u00e9p\u00f4t</li> <li><code>actions/setup-node@v3</code> : permet de configurer l'environnement Node.js</li> <li><code>npm ci</code> : permet d'installer les d\u00e9pendances du projet</li> <li><code>npm run build --if-present</code> : permet de construire le projet si un script <code>build</code> est d\u00e9fini dans le fichier <code>package.json</code></li> <li><code>npm test</code> : permet de lancer les tests</li> </ul> </li> </ul> </li> </ul> </li> </ul> <p>La documentation de github permet de comprendre le fonctionnement de chaque partie du fichier YAML : https://docs.github.com/en/actions/learn-github-actions/workflow-syntax-for-github-actions</p>"},{"location":"actions/#execution-dune-action","title":"Ex\u00e9cution d'une action","text":"<p>Pour les actions qui se d\u00e9clenchent sur un \u00e9v\u00e9nement <code>push</code>, l'action est ex\u00e9cut\u00e9e sur la branche qui a d\u00e9clench\u00e9 l'\u00e9v\u00e9nement. Pour les actions qui se d\u00e9clenchent sur un \u00e9v\u00e9nement <code>pull_request</code>, l'action est ex\u00e9cut\u00e9e sur la branche de la pull request.</p> <p>D\u00e8s qu'un \u00e9v\u00e9nement est d\u00e9clench\u00e9, le workflow est ex\u00e9cut\u00e9. On peut suivre l'ex\u00e9cution du workflow dans l'onglet <code>Actions</code> du d\u00e9p\u00f4t.</p> <p></p> <p>Pour chaque workflow, on peut voir son \u00e9tat, son nom, la branche sur laquelle il a \u00e9t\u00e9 d\u00e9clench\u00e9, la date de d\u00e9clenchement, le commit qui a d\u00e9clench\u00e9 le workflow, le num\u00e9ro de la pull request si le workflow a \u00e9t\u00e9 d\u00e9clench\u00e9 par une pull request, le temps d'ex\u00e9cution.</p> <p>Dans cet exemple, le workflow <code>Build</code> a \u00e9t\u00e9 d\u00e9clench\u00e9 par un \u00e9v\u00e9nement <code>push</code> sur la branche <code>feature/character-detail</code> et est en succ\u00e8s. Il est \u00e9galement en cours d'ex\u00e9cution pour la pull request <code>#1</code>.</p> <p>En cliquant sur le nom du workflow, on peut voir les d\u00e9tails de l'ex\u00e9cution du workflow.</p> <p></p> <p>On peut ensuite voir les d\u00e9tails de chaque job.</p> <p></p> <p>Ici, on peut voir que le job <code>build</code> contient 8 \u00e9tapes. Certaines sont des \u00e9tapes pr\u00e9d\u00e9finies par github: </p> <ul> <li>Set up job</li> <li>Complete job</li> </ul> <p>D'autres sont des \u00e9tapes d\u00e9finies dans le fichier YAML, ce sont celles-ci qui nous int\u00e9ressent :</p> <ul> <li>checkout</li> <li>setup-node</li> <li>npm ci</li> <li>npm run build</li> </ul> <p>Elles peuvent g\u00e9n\u00e9rer une post-action:</p> <ul> <li>setup-node</li> <li>checkout</li> </ul> <p>Les \u00e9tapes pr\u00e9d\u00e9finies par github permettent de configurer l'environnement d'ex\u00e9cution du job. Les post-actions permettent de nettoyer l'environnement d'ex\u00e9cution du job.</p>"},{"location":"actions/#aller-plus-loin","title":"Aller plus loin","text":"<p>On peut faire beaucoup de choses avec les actions github, aussi bien en r\u00e9action \u00e0 des \u00e9v\u00e9nements sur le d\u00e9p\u00f4t qu'en d\u00e9clenchant des \u00e9v\u00e9nements sur le d\u00e9p\u00f4t (manuellement ou en fonction d'un calendrier). Mais nous n'allons pas rentrer dans les d\u00e9tails ici.</p> <p>Pour aller plus loin, vous pouvez consulter la documentation de github : https://docs.github.com/en/actions</p>"},{"location":"projects/","title":"Projects","text":"<p>Github Projects est une fonctionnalit\u00e9 de GitHub qui permet de g\u00e9rer des t\u00e2ches \u00e0 r\u00e9aliser. Il est possible de cr\u00e9er des colonnes et des cartes. Les cartes peuvent \u00eatre d\u00e9plac\u00e9es d'une colonne \u00e0 une autre. Il est possible d'assigner une personne \u00e0 une carte. Il est possible de cr\u00e9er des cartes \u00e0 partir d'issues ou de pull requests.</p>"},{"location":"projects/#backlog","title":"Backlog","text":"<p>Github Projects propose diff\u00e9rents templates de colonnes. Le template <code>Backlog</code> permet de g\u00e9rer de mani\u00e8re agile.</p> <p>Le backlog est une liste de t\u00e2ches \u00e0 r\u00e9aliser. Les t\u00e2ches sont tri\u00e9es par priorit\u00e9. </p>"},{"location":"projects/#colonne-new","title":"Colonne <code>New</code>","text":"<p>La colonne <code>New</code> contient les t\u00e2ches \u00e0 r\u00e9aliser. Elle contient les t\u00e2ches \u00e0 r\u00e9aliser dans le futur. Elles ne sont pas encore totalement sp\u00e9cifi\u00e9es.</p> <p>Le Product Owner peut ajouter des t\u00e2ches dans cette colonne. Il peut aussi modifier les t\u00e2ches existantes.</p>"},{"location":"projects/#colonne-backlog","title":"Colonne <code>Backlog</code>","text":"<p>Pour passer un ticket de la colonne <code>New</code> \u00e0 la colonne <code>Backlog</code>, il faut que le ticket soit sp\u00e9cifi\u00e9, estim\u00e9 et prioris\u00e9. </p> <p>La sp\u00e9cification est g\u00e9n\u00e9ralement faite par le Product Owner. Une fois que le ticket est sp\u00e9cifi\u00e9, il est possible de l'estimer. Cela se fait g\u00e9n\u00e9ralement par l'\u00e9quipe de d\u00e9veloppement durant une c\u00e9r\u00e9monie de planification, c'est le moment pour \u00e9changer sur le ticket, pour le comprendre et pour l'estimer. </p> <p>Si durant la c\u00e9r\u00e9monie de planification, le ticket est jug\u00e9 trop complexe, il est possible de le d\u00e9couper en plusieurs tickets. Certains tickets peuvent aussi \u00eatre fusionn\u00e9s, si ils sont trop petits. On peut aussi ajouter des tickets dans la colonne <code>New</code> si on se rend compte qu'il manque des tickets ou m\u00eame supprimer des tickets si on se rend compte qu'ils ne sont pas n\u00e9cessaires.</p> <p>Une fois que le ticket est estim\u00e9, il est possible de le prioriser. Cela se fait g\u00e9n\u00e9ralement par le Product Owner.</p> <p>Pour la sp\u00e9cification, on peut utiliser sur un template de ticket. Par exemple, on peut partir sur le template suivant :</p> <pre><code># Objectif\n\n**En tant que**, _personna_ \n**Je souhaite**, _quoi_\n**Afin de**, _pourquoi_\n\n# Crit\u00e8re d'acceptation\n**Etant donn\u00e9 que**,  _situation actuelle_\n**Lorsque**, _objectif du ticket_\n**Alors**, _r\u00e9sultat souhait\u00e9_\n\n# Pr\u00e9-requis\n_Ce qui est n\u00e9cessaire pour afin de r\u00e9aliser le ticket_\n\n# DOD\n\n_D\u00e9finition Of Done_ \n</code></pre> <p><code>En tant que</code> permet de d\u00e9finir la personne qui souhaite r\u00e9aliser l'action, de comprendre le contexte de l'action, de comprendre les motivations de la personne, les enjeux de l'action.</p> <p><code>Je souhaite</code> permet de d\u00e9finir l'action \u00e0 r\u00e9aliser. C'est l'action qui sera r\u00e9alis\u00e9e par la personne.</p> <p><code>Afin de</code> permet de d\u00e9finir le but de l'action. C'est le r\u00e9sultat attendu par la personne.</p> <p><code>Etant donn\u00e9 que</code> permet de d\u00e9finir le contexte de l'action. C'est la situation actuelle.</p> <p><code>Lorsque</code> permet de d\u00e9finir l'action \u00e0 r\u00e9aliser. C'est l'action qui sera r\u00e9alis\u00e9e par la personne.</p> <p><code>Alors</code> permet de d\u00e9finir le r\u00e9sultat attendu par la personne.</p> <p><code>Pr\u00e9-requis</code> permet de d\u00e9finir les pr\u00e9-requis pour r\u00e9aliser le ticket. Par exemple la r\u00e9alisation d'un autre ticket.</p> <p><code>D\u00e9finition Of Done</code> permet de d\u00e9finir les crit\u00e8res de fin de r\u00e9alisation du ticket. C'est la d\u00e9finition de fini. Par exemple, le code est test\u00e9, le code est document\u00e9, le code est d\u00e9ploy\u00e9.</p>"},{"location":"projects/#colonne-ready","title":"Colonne <code>Ready</code>","text":"<p>Une fois le ticket sp\u00e9cifi\u00e9, estim\u00e9 et prioris\u00e9, il est possible de le passer dans la colonne <code>Ready</code>. Cela signifie que le ticket est pr\u00eat \u00e0 \u00eatre r\u00e9alis\u00e9.</p> <p>Les membres de l'\u00e9quipe peuvent prendre un ticket dans la colonne <code>Ready</code>, c'est le moment de transformer le ticket en <code>issue</code> rattacher \u00e0 un repository. Pour plus d'information sur les <code>issues</code>, voir la section Issues.</p>"},{"location":"projects/#colonne-in-progress","title":"Colonne <code>In progress</code>","text":"<p>Une fois le ticket pris par un membre de l'\u00e9quipe, il est possible de le passer dans la colonne <code>In progress</code>. Cela signifie que le ticket est en cours de r\u00e9alisation.</p>"},{"location":"projects/#colonne-in-review","title":"Colonne <code>In review</code>","text":"<p>Une fois le ticket r\u00e9alis\u00e9, il est possible de le passer dans la colonne <code>In review</code>. Cela signifie que le ticket est en cours de revue, g\u00e9n\u00e9ralement gr\u00e2ce \u00e0 une pull request.</p>"},{"location":"projects/#colonne-done","title":"Colonne <code>Done</code>","text":"<p>Une fois le ticket revu, il est possible de le passer dans la colonne <code>Done</code>. Cela signifie que le ticket est termin\u00e9.</p>"},{"location":"projects/#by-priority","title":"By priority","text":"<p>Le template <code>By priority</code> permet de g\u00e9rer les t\u00e2ches \u00e0 r\u00e9aliser par priorit\u00e9.</p> <p>Les tickets sont tri\u00e9s par priorit\u00e9. Les tickets les plus prioritaires sont en haut de la colonne. Les tickets les moins prioritaires sont en bas de la colonne.</p> <p>L'\u00e9quipe de d\u00e9veloppeur est sens\u00e9e prendre les tickets les plus prioritaires en premier.</p>"},{"location":"projects/#by-size","title":"By size","text":"<p>Le template <code>By size</code> permet de g\u00e9rer les t\u00e2ches \u00e0 r\u00e9aliser par taille.</p>"},{"location":"pull-request/","title":"Pull requests","text":"<p>Une bonne pratique de d\u00e9veloppement est de ne jamais travailler directement sur la branche <code>main</code>. En effet, cette branche contient le code de production. Il est donc important de travailler sur une branche de d\u00e9veloppement, qui contiendra le code en cours de d\u00e9veloppement. Une fois que le code est pr\u00eat, il est fusionn\u00e9 dans la branche <code>main</code>.</p> <p>Des commandes <code>git</code> permettent de cr\u00e9er et de fusionner des branches. Cependant, il existe des outils qui permettent de faciliter le processus de cr\u00e9ation et de fusion de branches. La fusion d'une branche \u00e9tant une \u00e9tape importante dans le processus de d\u00e9veloppement, il est utile de se servir d'un outillage qui permet de faciliter cette \u00e9tape.</p> <p>En effet avant de fusionner une branche dans une autre, il est important de v\u00e9rifier que le code de la branche \u00e0 fusionner ne contient pas de conflits avec le code de la branche dans laquelle on veut fusionner. Il est \u00e9galement important de v\u00e9rifier que le code de la branche \u00e0 fusionner ne contient pas de r\u00e9gression, que l'applicatif fonctionne toujours correctement.</p> <p>On peut aussi vouloir ajouter des \u00e9tapes de validation avant de fusionner une branche dans une autre. Par exemple, on peut vouloir que le code de la branche \u00e0 fusionner soit valid\u00e9 par un autre d\u00e9veloppeur avant de pouvoir la fusionner dans la branche principale. Que le code soit de qualit\u00e9, qu'il respecte les conventions de codage, qu'il soit test\u00e9, etc.</p> <p>github outille cette \u00e9tape de validation en proposant un m\u00e9canisme de pull request.</p> <p>La pull request est le moyen par lequel vous pouvez proposer des modifications de code \u00e0 un projet. Elle permet de signaler aux autres contributeurs que vous avez termin\u00e9 une fonctionnalit\u00e9 ou une correction de bug. Une fois une pull request ouverte, vous pouvez discuter et revoir les modifications propos\u00e9es avec les autres contributeurs et ajouter des commits suppl\u00e9mentaires avant que les changements soient fusionn\u00e9s dans la branche cible.</p> <p>Pour expliquer le processus de pull request, nous allons utiliser l'exemple suivant, se basant sur le workflow GitFlow :</p> <ul> <li>une branche <code>main</code> qui contient le code de production.</li> <li>une branche <code>develop</code> qui contient le code de d\u00e9veloppement.</li> <li>une branche <code>feature1</code> qui contient le code d'une nouvelle fonctionnalit\u00e9.</li> <li>une autre branche <code>feature2</code> qui contient le code d'une autre nouvelle fonctionnalit\u00e9.</li> </ul> <pre><code>gitGraph\n   checkout main\n   commit\n   branch develop\n   checkout develop\n   commit\n   commit\n   branch feature1\n   checkout feature1\n   commit\n   commit\n   checkout develop\n   branch feature2\n   checkout feature2\n   commit\n   checkout develop\n   merge feature1\n   checkout feature2\n   commit\n   checkout develop\n   merge feature2\n   checkout main\n   merge develop</code></pre>"},{"location":"pull-request/#creer-une-pull-request","title":"Cr\u00e9er une pull request","text":"<p>Pour cr\u00e9er une pull request, il faut aller sur la page du repository, puis cliquer sur le bouton <code>New pull request</code>. Une pull request est l'action de demander \u00e0 fusionner une branche dans une autre. Dans notre exemple, nous allons demander \u00e0 fusionner la branche <code>feature1</code> dans la branche <code>develop</code>.</p> <p></p> <p></p> <p>Lors de la cr\u00e9ation de la pull request, vous pouvez ajouter un titre et une description. Le titre doit \u00eatre explicite et doit permettre de comprendre rapidement ce que fait la pull request. La description permet de donner plus de d\u00e9tails sur la pull request. Par exemple, vous pouvez expliquer pourquoi vous avez fait cette pull request, quelles sont les modifications apport\u00e9es, etc.</p> <p>Une fois la pull request cr\u00e9\u00e9e, vous pouvez la consulter. Vous pouvez voir les modifications apport\u00e9es par la pull request ainsi que les commits qui ont \u00e9t\u00e9 ajout\u00e9s, les fichiers modifi\u00e9s par la pull request. Vous pouvez \u00e9galement voir les discussions qui ont eu lieu sur la pull request.</p> <p></p>"},{"location":"pull-request/#fusionner-une-pull-request","title":"Fusionner une pull request","text":"<p>Une fois que la pull request est pr\u00eate, vous pouvez la fusionner. Pour cela, il faut cliquer sur le bouton <code>Merge pull request</code>.</p> <p>Comme nous n'avons pas encore mis en place d'\u00e9tapes de validation, nous pouvons fusionner la pull request directement. Cependant, il est possible, m\u00eame conseill\u00e9 de mettre en place des \u00e9tapes de validation avant de pouvoir fusionner la pull request.</p> <p>Si il n'y a pas de conflit, la pull request est fusionn\u00e9e. Sinon, il faut d'abord r\u00e9soudre les conflits avant de pouvoir fusionner la pull request.</p> <p>Une fois la pull request fusionn\u00e9e, vous pouvez supprimer la branche <code>feature1</code> si vous n'en avez plus besoin. Pour cela, il faut cliquer sur le bouton <code>Delete branch</code>. Il est possible de supprimer la branche directement depuis la pull request ou depuis la page du repository. </p> <p>Il est aussi possible de la supprimer automatiquement lors de la fusion de la pull request. Pour cela, il faut cocher la case <code>Delete branch when pull request is merged</code>. </p> <p>Une option g\u00e9n\u00e9rale permet de supprimer automatiquement les branches qui ont \u00e9t\u00e9 fusionn\u00e9es. Pour cela, il faut aller dans les param\u00e8tres du repository, puis dans la section <code>Branches</code>. Dans la section <code>Automatically delete head branches</code>, cochez la case <code>Enable auto delete head branches</code>.</p>"},{"location":"settings/","title":"Settings","text":""},{"location":"settings/#protection-des-branches","title":"Protection des branches","text":""},{"location":"settings/#protection-de-la-branche-main","title":"Protection de la branche <code>main</code>","text":"<p>Une bonne pratique est de prot\u00e9ger la branche <code>main</code> contre les modifications directes. Toutes les modifications doivent \u00eatre faites \u00e0 partir d'une pull request. Il sera donc impossible de faire un <code>git push</code> sur la branche <code>main</code>.</p> <p>github vous informe d'ailleurs lorsque vous avez plusieurs branches si votre branch <code>main</code> n'est pas prot\u00e9g\u00e9e.</p> <p></p> <p>Pour prot\u00e9ger la branche <code>main</code>, il faut aller dans les param\u00e8tres du repository, puis dans la section <code>Branches</code>. Dans la section <code>Branch protection rules</code>, cliquez sur le bouton <code>Add branch protection rule</code>.</p> <p></p> <p>A minima, il faut cocher la case <code>Require pull request before merging</code>. Cela permet de s'assurer que le code a \u00e9t\u00e9 valid\u00e9 avant d'\u00eatre fusionn\u00e9 dans la branche <code>main</code>.</p> <p></p>"},{"location":"settings/#protection-de-la-branche-develop","title":"Protection de la branche <code>develop</code>","text":"<p>M\u00eame si la branch <code>develop</code> n'est pas une branche de production, il est \u00e9galement int\u00e9ressant de la prot\u00e9ger contre les modifications directes. Cela permet de s'assurer que tout ce qui est fusionn\u00e9 dans la branche <code>develop</code> a \u00e9t\u00e9 valid\u00e9 par une pull request et passe donc toutes les \u00e9tapes de validation que l'on souhaite mettre en place.</p> <p>Nous allons donc prot\u00e9ger la branche <code>develop</code> de la m\u00eame mani\u00e8re que la branche <code>main</code>. Nous verrons plus tard comment mettre en place des \u00e9tapes de validation.</p>"},{"location":"settings/#verification-des-protections","title":"V\u00e9rification des protections","text":"<p>Une fois les branches <code>main</code> et <code>develop</code> prot\u00e9g\u00e9es, vous ne pouvez plus faire de <code>git push</code> directement sur ces branches. Vous devez obligatoirement passer par une pull request. </p> <p></p> <p>De m\u00eame si vous passez par l'interface web de github pour modifier un fichier, vous ne pouvez plus faire un <code>commit</code> directement sur la branche <code>main</code> ou <code>develop</code>.</p> <p></p>"},{"location":"settings/#aller-plus-loin-dans-la-protection-des-branches","title":"Aller plus loin dans la protection des branches","text":"<p>Les options de protection des branches \u00e9voluent r\u00e9guli\u00e8rement. Il est donc possible que les options pr\u00e9sent\u00e9es ci-dessous ne soient plus disponibles ou que de nouvelles options soient disponibles. Sont pr\u00e9sent\u00e9es ici les options qui paraissent les plus int\u00e9ressantes.</p>"},{"location":"settings/#require-approvals","title":"Require approvals","text":"<p>L'option <code>Require approvals</code> permet de d\u00e9finir le nombre d'approbations n\u00e9cessaires avant de pouvoir fusionner la pull request. Par d\u00e9faut, il faut une approbation. Vous pouvez augmenter ce nombre si vous souhaitez que plusieurs personnes valident la pull request avant de pouvoir la fusionner.</p> <p></p> <p>Cette option est int\u00e9ressante si vous souhaitez que le code soit valid\u00e9 par plusieurs personnes avant de pouvoir le fusionner. Cela permet de s'assurer que le code est de qualit\u00e9, qu'il respecte les conventions de codage, qu'il est test\u00e9, etc.</p>"},{"location":"settings/#dismiss-stale-pull-request-approvals-when-new-commits-are-pushed","title":"Dismiss stale pull request approvals when new commits are pushed","text":"<p>L'option <code>Dismiss stale pull request approvals when new commits are pushed</code> permet de supprimer les approbations lorsque de nouveaux commits sont ajout\u00e9s \u00e0 la pull request. Cela permet de s'assurer que les approbations ne sont plus valides lorsque de nouveaux commits sont ajout\u00e9s \u00e0 la pull request.</p>"},{"location":"settings/#require-review-from-code-owners","title":"Require review from Code Owners","text":"<p>L'option <code>Require review from Code Owners</code> permet de s'assurer que les propri\u00e9taires du code ont valid\u00e9 la pull request avant de pouvoir la fusionner. Pour cela, il faut cr\u00e9er un fichier <code>CODEOWNERS</code> \u00e0 la racine du repository. Ce fichier permet de d\u00e9finir les propri\u00e9taires du code.</p> <p>Par exemple, si vous avez un fichier <code>README.md</code> et que vous souhaitez que les propri\u00e9taires du code soient <code>user1</code> et <code>user2</code>, il faut ajouter la ligne suivante dans le fichier <code>CODEOWNERS</code> :</p> <pre><code>README.md @user1 @user2\n</code></pre> <p>Ainsi, lorsque vous cr\u00e9erez une pull request qui modifie le fichier <code>README.md</code>, les utilisateurs <code>user1</code> et <code>user2</code> seront automatiquement ajout\u00e9s comme reviewers de la pull request.</p>"},{"location":"settings/#require-status-checks-to-pass-before-merging","title":"Require status checks to pass before merging","text":"<p>L'option <code>Require status checks to pass before merging</code> permet de s'assurer que les \u00e9tapes de validation ont \u00e9t\u00e9 ex\u00e9cut\u00e9es avant de pouvoir fusionner la pull request. Pour cela, il faut cr\u00e9er des \u00e9tapes de validation, c'est gr\u00e2ce \u00e0 ces \u00e9tapes de validation que l'on pourra s'assurer que la pull request est valide en fonction des crit\u00e8res que l'on souhaite.</p> <p>Par exemple :</p> <ul> <li>le code est valide, par exemple pour un projet \u00e9crit dans un langage compil\u00e9, le code compile.</li> <li>le code respecte les conventions de codage.</li> <li>le code est test\u00e9 et les tests passent.</li> <li>la couverture de test est suffisante.</li> <li>la qualit\u00e9 du code est suffisante.</li> <li>...</li> </ul> <p>Les status checks sont des \u00e9tapes de validation qui sont ex\u00e9cut\u00e9es \u00e0 chaque fois que vous faites un <code>git push</code>. Il s'agit d'actions qui sont ex\u00e9cut\u00e9es par github ou par des outils tiers. Par exemple, github propose des status checks pour v\u00e9rifier que le code compile, que les tests passent, que la couverture de test est suffisante, etc. Voir la page Actions pour plus de d\u00e9tails.</p>"}]}